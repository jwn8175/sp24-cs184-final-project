#version 330

uniform sampler2D tex;

uniform float tex_height;
uniform float tex_width;
uniform float tex_size;

in vec2 uv;

out vec4 out_color;

const float PI = 3.14159265358979323846;
const float inv_root_two_pi = 0.3989422804;
const float inv_two_pi = 0.15915494309;
// This implementation is based off of the following:
// https://www.rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/


// Weights and offsets generated by https://lisyarus.github.io/blog/posts/blur-coefficients-generator.html
// Sigma = 2, blur radius = 5
const int SAMPLE_COUNT = 6;

const float OFFSETS[6] = float[6](
    -4.2493201357512165,
    -2.351564403533789,
    -0.46943377969837197,
    1.409199877085212,
    3.2979348079914823,
    5
);

const float WEIGHTS[6] = float[6](
    0.03730160027910494,
    0.1876867142594754,
    0.37430973652704624,
    0.2974163809054194,
    0.09398552798363,
    0.00930004004532405
);

float gaussian2D(float sigma, vec2 coor) {
    float inv_sigma_squared = 1.0 / (sigma * sigma);
    return inv_sigma_squared * inv_two_pi * exp(-1.0 * (coor.x * coor.x + coor.y * coor.y) / (2 * sigma * sigma));
}

float gaussian(float sigma, float coor) {
    return inv_root_two_pi * (1.0 / sigma) * exp(-1.0 * (coor * coor) / (2.0 * sigma * sigma));
}

// Code for the one-pass Gaussian blu filter referenced from 
// https://lisyarus.github.io/blog/posts/blur-coefficients-generator.html
// Thank you Lisyarus you've saved my life... 
void main() {

    vec2 horizontal_blur = vec2(1, 0);
    vec2 vertical_blur = vec2(0, 1);
    vec2 size = textureSize(tex, 0);

    out_color = vec4(0.0, 0.0, 0.0, 0.0);
    
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        vec2 offset = horizontal_blur * OFFSETS[i] / size;

        out_color += texture(tex, uv + offset) * WEIGHTS[i];
    }

}